// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace seegnify {
namespace graph {
class ErrorResponse;
struct ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class GetWeights;
struct GetWeightsDefaultTypeInternal;
extern GetWeightsDefaultTypeInternal _GetWeights_default_instance_;
class GetWeightsResponse;
struct GetWeightsResponseDefaultTypeInternal;
extern GetWeightsResponseDefaultTypeInternal _GetWeightsResponse_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetWeights;
struct SetWeightsDefaultTypeInternal;
extern SetWeightsDefaultTypeInternal _SetWeights_default_instance_;
class SuccessResponse;
struct SuccessResponseDefaultTypeInternal;
extern SuccessResponseDefaultTypeInternal _SuccessResponse_default_instance_;
class UpdWeights;
struct UpdWeightsDefaultTypeInternal;
extern UpdWeightsDefaultTypeInternal _UpdWeights_default_instance_;
}  // namespace graph
}  // namespace seegnify
PROTOBUF_NAMESPACE_OPEN
template<> ::seegnify::graph::ErrorResponse* Arena::CreateMaybeMessage<::seegnify::graph::ErrorResponse>(Arena*);
template<> ::seegnify::graph::GetWeights* Arena::CreateMaybeMessage<::seegnify::graph::GetWeights>(Arena*);
template<> ::seegnify::graph::GetWeightsResponse* Arena::CreateMaybeMessage<::seegnify::graph::GetWeightsResponse>(Arena*);
template<> ::seegnify::graph::Request* Arena::CreateMaybeMessage<::seegnify::graph::Request>(Arena*);
template<> ::seegnify::graph::Response* Arena::CreateMaybeMessage<::seegnify::graph::Response>(Arena*);
template<> ::seegnify::graph::SetWeights* Arena::CreateMaybeMessage<::seegnify::graph::SetWeights>(Arena*);
template<> ::seegnify::graph::SuccessResponse* Arena::CreateMaybeMessage<::seegnify::graph::SuccessResponse>(Arena*);
template<> ::seegnify::graph::UpdWeights* Arena::CreateMaybeMessage<::seegnify::graph::UpdWeights>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace seegnify {
namespace graph {

// ===================================================================

class GetWeights final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:seegnify.graph.GetWeights) */ {
 public:
  inline GetWeights() : GetWeights(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetWeights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWeights(const GetWeights& from);
  GetWeights(GetWeights&& from) noexcept
    : GetWeights() {
    *this = ::std::move(from);
  }

  inline GetWeights& operator=(const GetWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWeights& operator=(GetWeights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWeights& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWeights* internal_default_instance() {
    return reinterpret_cast<const GetWeights*>(
               &_GetWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetWeights& a, GetWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWeights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWeights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetWeights& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetWeights& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.GetWeights";
  }
  protected:
  explicit GetWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:seegnify.graph.GetWeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class GetWeightsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seegnify.graph.GetWeightsResponse) */ {
 public:
  inline GetWeightsResponse() : GetWeightsResponse(nullptr) {}
  ~GetWeightsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetWeightsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWeightsResponse(const GetWeightsResponse& from);
  GetWeightsResponse(GetWeightsResponse&& from) noexcept
    : GetWeightsResponse() {
    *this = ::std::move(from);
  }

  inline GetWeightsResponse& operator=(const GetWeightsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWeightsResponse& operator=(GetWeightsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWeightsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWeightsResponse* internal_default_instance() {
    return reinterpret_cast<const GetWeightsResponse*>(
               &_GetWeightsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetWeightsResponse& a, GetWeightsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWeightsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWeightsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWeightsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWeightsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWeightsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWeightsResponse& from) {
    GetWeightsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWeightsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.GetWeightsResponse";
  }
  protected:
  explicit GetWeightsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
  };
  // required bytes weights = 1;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const std::string& weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weights();
  PROTOBUF_NODISCARD std::string* release_weights();
  void set_allocated_weights(std::string* weights);
  private:
  const std::string& _internal_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weights(const std::string& value);
  std::string* _internal_mutable_weights();
  public:

  // @@protoc_insertion_point(class_scope:seegnify.graph.GetWeightsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weights_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class SetWeights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seegnify.graph.SetWeights) */ {
 public:
  inline SetWeights() : SetWeights(nullptr) {}
  ~SetWeights() override;
  explicit PROTOBUF_CONSTEXPR SetWeights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWeights(const SetWeights& from);
  SetWeights(SetWeights&& from) noexcept
    : SetWeights() {
    *this = ::std::move(from);
  }

  inline SetWeights& operator=(const SetWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWeights& operator=(SetWeights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWeights& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWeights* internal_default_instance() {
    return reinterpret_cast<const SetWeights*>(
               &_SetWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetWeights& a, SetWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWeights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWeights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWeights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWeights& from) {
    SetWeights::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWeights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.SetWeights";
  }
  protected:
  explicit SetWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
  };
  // required bytes weights = 1;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const std::string& weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_weights();
  PROTOBUF_NODISCARD std::string* release_weights();
  void set_allocated_weights(std::string* weights);
  private:
  const std::string& _internal_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weights(const std::string& value);
  std::string* _internal_mutable_weights();
  public:

  // @@protoc_insertion_point(class_scope:seegnify.graph.SetWeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weights_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class UpdWeights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seegnify.graph.UpdWeights) */ {
 public:
  inline UpdWeights() : UpdWeights(nullptr) {}
  ~UpdWeights() override;
  explicit PROTOBUF_CONSTEXPR UpdWeights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdWeights(const UpdWeights& from);
  UpdWeights(UpdWeights&& from) noexcept
    : UpdWeights() {
    *this = ::std::move(from);
  }

  inline UpdWeights& operator=(const UpdWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdWeights& operator=(UpdWeights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdWeights& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdWeights* internal_default_instance() {
    return reinterpret_cast<const UpdWeights*>(
               &_UpdWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdWeights& a, UpdWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdWeights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdWeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdWeights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdWeights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdWeights& from) {
    UpdWeights::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdWeights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.UpdWeights";
  }
  protected:
  explicit UpdWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 1,
  };
  // required bytes update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const std::string& update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update();
  PROTOBUF_NODISCARD std::string* release_update();
  void set_allocated_update(std::string* update);
  private:
  const std::string& _internal_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update(const std::string& value);
  std::string* _internal_mutable_update();
  public:

  // @@protoc_insertion_point(class_scope:seegnify.graph.UpdWeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class SuccessResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:seegnify.graph.SuccessResponse) */ {
 public:
  inline SuccessResponse() : SuccessResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SuccessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuccessResponse(const SuccessResponse& from);
  SuccessResponse(SuccessResponse&& from) noexcept
    : SuccessResponse() {
    *this = ::std::move(from);
  }

  inline SuccessResponse& operator=(const SuccessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuccessResponse& operator=(SuccessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuccessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuccessResponse* internal_default_instance() {
    return reinterpret_cast<const SuccessResponse*>(
               &_SuccessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SuccessResponse& a, SuccessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SuccessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuccessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuccessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuccessResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SuccessResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SuccessResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.SuccessResponse";
  }
  protected:
  explicit SuccessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:seegnify.graph.SuccessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class ErrorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seegnify.graph.ErrorResponse) */ {
 public:
  inline ErrorResponse() : ErrorResponse(nullptr) {}
  ~ErrorResponse() override;
  explicit PROTOBUF_CONSTEXPR ErrorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorResponse(const ErrorResponse& from);
  ErrorResponse(ErrorResponse&& from) noexcept
    : ErrorResponse() {
    *this = ::std::move(from);
  }

  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
               &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ErrorResponse& a, ErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrorResponse& from) {
    ErrorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.ErrorResponse";
  }
  protected:
  explicit ErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // required string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required uint32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:seegnify.graph.ErrorResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seegnify.graph.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kGetWeights = 10,
    kSetWeights = 11,
    kUpdWeights = 12,
    REQUEST_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetWeightsFieldNumber = 10,
    kSetWeightsFieldNumber = 11,
    kUpdWeightsFieldNumber = 12,
  };
  // .seegnify.graph.GetWeights get_weights = 10;
  bool has_get_weights() const;
  private:
  bool _internal_has_get_weights() const;
  public:
  void clear_get_weights();
  const ::seegnify::graph::GetWeights& get_weights() const;
  PROTOBUF_NODISCARD ::seegnify::graph::GetWeights* release_get_weights();
  ::seegnify::graph::GetWeights* mutable_get_weights();
  void set_allocated_get_weights(::seegnify::graph::GetWeights* get_weights);
  private:
  const ::seegnify::graph::GetWeights& _internal_get_weights() const;
  ::seegnify::graph::GetWeights* _internal_mutable_get_weights();
  public:
  void unsafe_arena_set_allocated_get_weights(
      ::seegnify::graph::GetWeights* get_weights);
  ::seegnify::graph::GetWeights* unsafe_arena_release_get_weights();

  // .seegnify.graph.SetWeights set_weights = 11;
  bool has_set_weights() const;
  private:
  bool _internal_has_set_weights() const;
  public:
  void clear_set_weights();
  const ::seegnify::graph::SetWeights& set_weights() const;
  PROTOBUF_NODISCARD ::seegnify::graph::SetWeights* release_set_weights();
  ::seegnify::graph::SetWeights* mutable_set_weights();
  void set_allocated_set_weights(::seegnify::graph::SetWeights* set_weights);
  private:
  const ::seegnify::graph::SetWeights& _internal_set_weights() const;
  ::seegnify::graph::SetWeights* _internal_mutable_set_weights();
  public:
  void unsafe_arena_set_allocated_set_weights(
      ::seegnify::graph::SetWeights* set_weights);
  ::seegnify::graph::SetWeights* unsafe_arena_release_set_weights();

  // .seegnify.graph.UpdWeights upd_weights = 12;
  bool has_upd_weights() const;
  private:
  bool _internal_has_upd_weights() const;
  public:
  void clear_upd_weights();
  const ::seegnify::graph::UpdWeights& upd_weights() const;
  PROTOBUF_NODISCARD ::seegnify::graph::UpdWeights* release_upd_weights();
  ::seegnify::graph::UpdWeights* mutable_upd_weights();
  void set_allocated_upd_weights(::seegnify::graph::UpdWeights* upd_weights);
  private:
  const ::seegnify::graph::UpdWeights& _internal_upd_weights() const;
  ::seegnify::graph::UpdWeights* _internal_mutable_upd_weights();
  public:
  void unsafe_arena_set_allocated_upd_weights(
      ::seegnify::graph::UpdWeights* upd_weights);
  ::seegnify::graph::UpdWeights* unsafe_arena_release_upd_weights();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:seegnify.graph.Request)
 private:
  class _Internal;
  void set_has_get_weights();
  void set_has_set_weights();
  void set_has_upd_weights();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::seegnify::graph::GetWeights* get_weights_;
      ::seegnify::graph::SetWeights* set_weights_;
      ::seegnify::graph::UpdWeights* upd_weights_;
    } request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seegnify.graph.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kGetWeights = 11,
    kSuccess = 12,
    kError = 13,
    RESPONSE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seegnify.graph.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetWeightsFieldNumber = 11,
    kSuccessFieldNumber = 12,
    kErrorFieldNumber = 13,
  };
  // .seegnify.graph.GetWeightsResponse get_weights = 11;
  bool has_get_weights() const;
  private:
  bool _internal_has_get_weights() const;
  public:
  void clear_get_weights();
  const ::seegnify::graph::GetWeightsResponse& get_weights() const;
  PROTOBUF_NODISCARD ::seegnify::graph::GetWeightsResponse* release_get_weights();
  ::seegnify::graph::GetWeightsResponse* mutable_get_weights();
  void set_allocated_get_weights(::seegnify::graph::GetWeightsResponse* get_weights);
  private:
  const ::seegnify::graph::GetWeightsResponse& _internal_get_weights() const;
  ::seegnify::graph::GetWeightsResponse* _internal_mutable_get_weights();
  public:
  void unsafe_arena_set_allocated_get_weights(
      ::seegnify::graph::GetWeightsResponse* get_weights);
  ::seegnify::graph::GetWeightsResponse* unsafe_arena_release_get_weights();

  // .seegnify.graph.SuccessResponse success = 12;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::seegnify::graph::SuccessResponse& success() const;
  PROTOBUF_NODISCARD ::seegnify::graph::SuccessResponse* release_success();
  ::seegnify::graph::SuccessResponse* mutable_success();
  void set_allocated_success(::seegnify::graph::SuccessResponse* success);
  private:
  const ::seegnify::graph::SuccessResponse& _internal_success() const;
  ::seegnify::graph::SuccessResponse* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::seegnify::graph::SuccessResponse* success);
  ::seegnify::graph::SuccessResponse* unsafe_arena_release_success();

  // .seegnify.graph.ErrorResponse error = 13;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::seegnify::graph::ErrorResponse& error() const;
  PROTOBUF_NODISCARD ::seegnify::graph::ErrorResponse* release_error();
  ::seegnify::graph::ErrorResponse* mutable_error();
  void set_allocated_error(::seegnify::graph::ErrorResponse* error);
  private:
  const ::seegnify::graph::ErrorResponse& _internal_error() const;
  ::seegnify::graph::ErrorResponse* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::seegnify::graph::ErrorResponse* error);
  ::seegnify::graph::ErrorResponse* unsafe_arena_release_error();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:seegnify.graph.Response)
 private:
  class _Internal;
  void set_has_get_weights();
  void set_has_success();
  void set_has_error();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::seegnify::graph::GetWeightsResponse* get_weights_;
      ::seegnify::graph::SuccessResponse* success_;
      ::seegnify::graph::ErrorResponse* error_;
    } response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetWeights

// -------------------------------------------------------------------

// GetWeightsResponse

// required bytes weights = 1;
inline bool GetWeightsResponse::_internal_has_weights() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetWeightsResponse::has_weights() const {
  return _internal_has_weights();
}
inline void GetWeightsResponse::clear_weights() {
  _impl_.weights_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetWeightsResponse::weights() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.GetWeightsResponse.weights)
  return _internal_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetWeightsResponse::set_weights(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.weights_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:seegnify.graph.GetWeightsResponse.weights)
}
inline std::string* GetWeightsResponse::mutable_weights() {
  std::string* _s = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.GetWeightsResponse.weights)
  return _s;
}
inline const std::string& GetWeightsResponse::_internal_weights() const {
  return _impl_.weights_.Get();
}
inline void GetWeightsResponse::_internal_set_weights(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.weights_.Set(value, GetArenaForAllocation());
}
inline std::string* GetWeightsResponse::_internal_mutable_weights() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.weights_.Mutable(GetArenaForAllocation());
}
inline std::string* GetWeightsResponse::release_weights() {
  // @@protoc_insertion_point(field_release:seegnify.graph.GetWeightsResponse.weights)
  if (!_internal_has_weights()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.weights_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.weights_.IsDefault()) {
    _impl_.weights_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetWeightsResponse::set_allocated_weights(std::string* weights) {
  if (weights != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weights_.SetAllocated(weights, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.weights_.IsDefault()) {
    _impl_.weights_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:seegnify.graph.GetWeightsResponse.weights)
}

// -------------------------------------------------------------------

// SetWeights

// required bytes weights = 1;
inline bool SetWeights::_internal_has_weights() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetWeights::has_weights() const {
  return _internal_has_weights();
}
inline void SetWeights::clear_weights() {
  _impl_.weights_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetWeights::weights() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.SetWeights.weights)
  return _internal_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetWeights::set_weights(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.weights_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:seegnify.graph.SetWeights.weights)
}
inline std::string* SetWeights::mutable_weights() {
  std::string* _s = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.SetWeights.weights)
  return _s;
}
inline const std::string& SetWeights::_internal_weights() const {
  return _impl_.weights_.Get();
}
inline void SetWeights::_internal_set_weights(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.weights_.Set(value, GetArenaForAllocation());
}
inline std::string* SetWeights::_internal_mutable_weights() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.weights_.Mutable(GetArenaForAllocation());
}
inline std::string* SetWeights::release_weights() {
  // @@protoc_insertion_point(field_release:seegnify.graph.SetWeights.weights)
  if (!_internal_has_weights()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.weights_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.weights_.IsDefault()) {
    _impl_.weights_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetWeights::set_allocated_weights(std::string* weights) {
  if (weights != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.weights_.SetAllocated(weights, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.weights_.IsDefault()) {
    _impl_.weights_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:seegnify.graph.SetWeights.weights)
}

// -------------------------------------------------------------------

// UpdWeights

// required bytes update = 1;
inline bool UpdWeights::_internal_has_update() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdWeights::has_update() const {
  return _internal_has_update();
}
inline void UpdWeights::clear_update() {
  _impl_.update_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdWeights::update() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.UpdWeights.update)
  return _internal_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdWeights::set_update(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.update_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:seegnify.graph.UpdWeights.update)
}
inline std::string* UpdWeights::mutable_update() {
  std::string* _s = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.UpdWeights.update)
  return _s;
}
inline const std::string& UpdWeights::_internal_update() const {
  return _impl_.update_.Get();
}
inline void UpdWeights::_internal_set_update(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.update_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdWeights::_internal_mutable_update() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.update_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdWeights::release_update() {
  // @@protoc_insertion_point(field_release:seegnify.graph.UpdWeights.update)
  if (!_internal_has_update()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.update_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_.IsDefault()) {
    _impl_.update_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdWeights::set_allocated_update(std::string* update) {
  if (update != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.update_.SetAllocated(update, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_.IsDefault()) {
    _impl_.update_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:seegnify.graph.UpdWeights.update)
}

// -------------------------------------------------------------------

// SuccessResponse

// -------------------------------------------------------------------

// ErrorResponse

// required uint32 status = 1;
inline bool ErrorResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorResponse::has_status() const {
  return _internal_has_status();
}
inline void ErrorResponse::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ErrorResponse::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t ErrorResponse::status() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.ErrorResponse.status)
  return _internal_status();
}
inline void ErrorResponse::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}
inline void ErrorResponse::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seegnify.graph.ErrorResponse.status)
}

// required string message = 2;
inline bool ErrorResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorResponse::has_message() const {
  return _internal_has_message();
}
inline void ErrorResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorResponse::message() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.ErrorResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorResponse::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:seegnify.graph.ErrorResponse.message)
}
inline std::string* ErrorResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.ErrorResponse.message)
  return _s;
}
inline const std::string& ErrorResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ErrorResponse::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorResponse::release_message() {
  // @@protoc_insertion_point(field_release:seegnify.graph.ErrorResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ErrorResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:seegnify.graph.ErrorResponse.message)
}

// -------------------------------------------------------------------

// Request

// .seegnify.graph.GetWeights get_weights = 10;
inline bool Request::_internal_has_get_weights() const {
  return request_case() == kGetWeights;
}
inline bool Request::has_get_weights() const {
  return _internal_has_get_weights();
}
inline void Request::set_has_get_weights() {
  _impl_._oneof_case_[0] = kGetWeights;
}
inline void Request::clear_get_weights() {
  if (_internal_has_get_weights()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.get_weights_;
    }
    clear_has_request();
  }
}
inline ::seegnify::graph::GetWeights* Request::release_get_weights() {
  // @@protoc_insertion_point(field_release:seegnify.graph.Request.get_weights)
  if (_internal_has_get_weights()) {
    clear_has_request();
    ::seegnify::graph::GetWeights* temp = _impl_.request_.get_weights_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.get_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seegnify::graph::GetWeights& Request::_internal_get_weights() const {
  return _internal_has_get_weights()
      ? *_impl_.request_.get_weights_
      : reinterpret_cast< ::seegnify::graph::GetWeights&>(::seegnify::graph::_GetWeights_default_instance_);
}
inline const ::seegnify::graph::GetWeights& Request::get_weights() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.Request.get_weights)
  return _internal_get_weights();
}
inline ::seegnify::graph::GetWeights* Request::unsafe_arena_release_get_weights() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seegnify.graph.Request.get_weights)
  if (_internal_has_get_weights()) {
    clear_has_request();
    ::seegnify::graph::GetWeights* temp = _impl_.request_.get_weights_;
    _impl_.request_.get_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_weights(::seegnify::graph::GetWeights* get_weights) {
  clear_request();
  if (get_weights) {
    set_has_get_weights();
    _impl_.request_.get_weights_ = get_weights;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seegnify.graph.Request.get_weights)
}
inline ::seegnify::graph::GetWeights* Request::_internal_mutable_get_weights() {
  if (!_internal_has_get_weights()) {
    clear_request();
    set_has_get_weights();
    _impl_.request_.get_weights_ = CreateMaybeMessage< ::seegnify::graph::GetWeights >(GetArenaForAllocation());
  }
  return _impl_.request_.get_weights_;
}
inline ::seegnify::graph::GetWeights* Request::mutable_get_weights() {
  ::seegnify::graph::GetWeights* _msg = _internal_mutable_get_weights();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.Request.get_weights)
  return _msg;
}

// .seegnify.graph.SetWeights set_weights = 11;
inline bool Request::_internal_has_set_weights() const {
  return request_case() == kSetWeights;
}
inline bool Request::has_set_weights() const {
  return _internal_has_set_weights();
}
inline void Request::set_has_set_weights() {
  _impl_._oneof_case_[0] = kSetWeights;
}
inline void Request::clear_set_weights() {
  if (_internal_has_set_weights()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.set_weights_;
    }
    clear_has_request();
  }
}
inline ::seegnify::graph::SetWeights* Request::release_set_weights() {
  // @@protoc_insertion_point(field_release:seegnify.graph.Request.set_weights)
  if (_internal_has_set_weights()) {
    clear_has_request();
    ::seegnify::graph::SetWeights* temp = _impl_.request_.set_weights_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.set_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seegnify::graph::SetWeights& Request::_internal_set_weights() const {
  return _internal_has_set_weights()
      ? *_impl_.request_.set_weights_
      : reinterpret_cast< ::seegnify::graph::SetWeights&>(::seegnify::graph::_SetWeights_default_instance_);
}
inline const ::seegnify::graph::SetWeights& Request::set_weights() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.Request.set_weights)
  return _internal_set_weights();
}
inline ::seegnify::graph::SetWeights* Request::unsafe_arena_release_set_weights() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seegnify.graph.Request.set_weights)
  if (_internal_has_set_weights()) {
    clear_has_request();
    ::seegnify::graph::SetWeights* temp = _impl_.request_.set_weights_;
    _impl_.request_.set_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set_weights(::seegnify::graph::SetWeights* set_weights) {
  clear_request();
  if (set_weights) {
    set_has_set_weights();
    _impl_.request_.set_weights_ = set_weights;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seegnify.graph.Request.set_weights)
}
inline ::seegnify::graph::SetWeights* Request::_internal_mutable_set_weights() {
  if (!_internal_has_set_weights()) {
    clear_request();
    set_has_set_weights();
    _impl_.request_.set_weights_ = CreateMaybeMessage< ::seegnify::graph::SetWeights >(GetArenaForAllocation());
  }
  return _impl_.request_.set_weights_;
}
inline ::seegnify::graph::SetWeights* Request::mutable_set_weights() {
  ::seegnify::graph::SetWeights* _msg = _internal_mutable_set_weights();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.Request.set_weights)
  return _msg;
}

// .seegnify.graph.UpdWeights upd_weights = 12;
inline bool Request::_internal_has_upd_weights() const {
  return request_case() == kUpdWeights;
}
inline bool Request::has_upd_weights() const {
  return _internal_has_upd_weights();
}
inline void Request::set_has_upd_weights() {
  _impl_._oneof_case_[0] = kUpdWeights;
}
inline void Request::clear_upd_weights() {
  if (_internal_has_upd_weights()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.upd_weights_;
    }
    clear_has_request();
  }
}
inline ::seegnify::graph::UpdWeights* Request::release_upd_weights() {
  // @@protoc_insertion_point(field_release:seegnify.graph.Request.upd_weights)
  if (_internal_has_upd_weights()) {
    clear_has_request();
    ::seegnify::graph::UpdWeights* temp = _impl_.request_.upd_weights_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.upd_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seegnify::graph::UpdWeights& Request::_internal_upd_weights() const {
  return _internal_has_upd_weights()
      ? *_impl_.request_.upd_weights_
      : reinterpret_cast< ::seegnify::graph::UpdWeights&>(::seegnify::graph::_UpdWeights_default_instance_);
}
inline const ::seegnify::graph::UpdWeights& Request::upd_weights() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.Request.upd_weights)
  return _internal_upd_weights();
}
inline ::seegnify::graph::UpdWeights* Request::unsafe_arena_release_upd_weights() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seegnify.graph.Request.upd_weights)
  if (_internal_has_upd_weights()) {
    clear_has_request();
    ::seegnify::graph::UpdWeights* temp = _impl_.request_.upd_weights_;
    _impl_.request_.upd_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_upd_weights(::seegnify::graph::UpdWeights* upd_weights) {
  clear_request();
  if (upd_weights) {
    set_has_upd_weights();
    _impl_.request_.upd_weights_ = upd_weights;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seegnify.graph.Request.upd_weights)
}
inline ::seegnify::graph::UpdWeights* Request::_internal_mutable_upd_weights() {
  if (!_internal_has_upd_weights()) {
    clear_request();
    set_has_upd_weights();
    _impl_.request_.upd_weights_ = CreateMaybeMessage< ::seegnify::graph::UpdWeights >(GetArenaForAllocation());
  }
  return _impl_.request_.upd_weights_;
}
inline ::seegnify::graph::UpdWeights* Request::mutable_upd_weights() {
  ::seegnify::graph::UpdWeights* _msg = _internal_mutable_upd_weights();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.Request.upd_weights)
  return _msg;
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .seegnify.graph.GetWeightsResponse get_weights = 11;
inline bool Response::_internal_has_get_weights() const {
  return response_case() == kGetWeights;
}
inline bool Response::has_get_weights() const {
  return _internal_has_get_weights();
}
inline void Response::set_has_get_weights() {
  _impl_._oneof_case_[0] = kGetWeights;
}
inline void Response::clear_get_weights() {
  if (_internal_has_get_weights()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.get_weights_;
    }
    clear_has_response();
  }
}
inline ::seegnify::graph::GetWeightsResponse* Response::release_get_weights() {
  // @@protoc_insertion_point(field_release:seegnify.graph.Response.get_weights)
  if (_internal_has_get_weights()) {
    clear_has_response();
    ::seegnify::graph::GetWeightsResponse* temp = _impl_.response_.get_weights_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.get_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seegnify::graph::GetWeightsResponse& Response::_internal_get_weights() const {
  return _internal_has_get_weights()
      ? *_impl_.response_.get_weights_
      : reinterpret_cast< ::seegnify::graph::GetWeightsResponse&>(::seegnify::graph::_GetWeightsResponse_default_instance_);
}
inline const ::seegnify::graph::GetWeightsResponse& Response::get_weights() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.Response.get_weights)
  return _internal_get_weights();
}
inline ::seegnify::graph::GetWeightsResponse* Response::unsafe_arena_release_get_weights() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seegnify.graph.Response.get_weights)
  if (_internal_has_get_weights()) {
    clear_has_response();
    ::seegnify::graph::GetWeightsResponse* temp = _impl_.response_.get_weights_;
    _impl_.response_.get_weights_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_weights(::seegnify::graph::GetWeightsResponse* get_weights) {
  clear_response();
  if (get_weights) {
    set_has_get_weights();
    _impl_.response_.get_weights_ = get_weights;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seegnify.graph.Response.get_weights)
}
inline ::seegnify::graph::GetWeightsResponse* Response::_internal_mutable_get_weights() {
  if (!_internal_has_get_weights()) {
    clear_response();
    set_has_get_weights();
    _impl_.response_.get_weights_ = CreateMaybeMessage< ::seegnify::graph::GetWeightsResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.get_weights_;
}
inline ::seegnify::graph::GetWeightsResponse* Response::mutable_get_weights() {
  ::seegnify::graph::GetWeightsResponse* _msg = _internal_mutable_get_weights();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.Response.get_weights)
  return _msg;
}

// .seegnify.graph.SuccessResponse success = 12;
inline bool Response::_internal_has_success() const {
  return response_case() == kSuccess;
}
inline bool Response::has_success() const {
  return _internal_has_success();
}
inline void Response::set_has_success() {
  _impl_._oneof_case_[0] = kSuccess;
}
inline void Response::clear_success() {
  if (_internal_has_success()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.success_;
    }
    clear_has_response();
  }
}
inline ::seegnify::graph::SuccessResponse* Response::release_success() {
  // @@protoc_insertion_point(field_release:seegnify.graph.Response.success)
  if (_internal_has_success()) {
    clear_has_response();
    ::seegnify::graph::SuccessResponse* temp = _impl_.response_.success_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seegnify::graph::SuccessResponse& Response::_internal_success() const {
  return _internal_has_success()
      ? *_impl_.response_.success_
      : reinterpret_cast< ::seegnify::graph::SuccessResponse&>(::seegnify::graph::_SuccessResponse_default_instance_);
}
inline const ::seegnify::graph::SuccessResponse& Response::success() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.Response.success)
  return _internal_success();
}
inline ::seegnify::graph::SuccessResponse* Response::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seegnify.graph.Response.success)
  if (_internal_has_success()) {
    clear_has_response();
    ::seegnify::graph::SuccessResponse* temp = _impl_.response_.success_;
    _impl_.response_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_success(::seegnify::graph::SuccessResponse* success) {
  clear_response();
  if (success) {
    set_has_success();
    _impl_.response_.success_ = success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seegnify.graph.Response.success)
}
inline ::seegnify::graph::SuccessResponse* Response::_internal_mutable_success() {
  if (!_internal_has_success()) {
    clear_response();
    set_has_success();
    _impl_.response_.success_ = CreateMaybeMessage< ::seegnify::graph::SuccessResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.success_;
}
inline ::seegnify::graph::SuccessResponse* Response::mutable_success() {
  ::seegnify::graph::SuccessResponse* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.Response.success)
  return _msg;
}

// .seegnify.graph.ErrorResponse error = 13;
inline bool Response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool Response::has_error() const {
  return _internal_has_error();
}
inline void Response::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void Response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.error_;
    }
    clear_has_response();
  }
}
inline ::seegnify::graph::ErrorResponse* Response::release_error() {
  // @@protoc_insertion_point(field_release:seegnify.graph.Response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::seegnify::graph::ErrorResponse* temp = _impl_.response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seegnify::graph::ErrorResponse& Response::_internal_error() const {
  return _internal_has_error()
      ? *_impl_.response_.error_
      : reinterpret_cast< ::seegnify::graph::ErrorResponse&>(::seegnify::graph::_ErrorResponse_default_instance_);
}
inline const ::seegnify::graph::ErrorResponse& Response::error() const {
  // @@protoc_insertion_point(field_get:seegnify.graph.Response.error)
  return _internal_error();
}
inline ::seegnify::graph::ErrorResponse* Response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seegnify.graph.Response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::seegnify::graph::ErrorResponse* temp = _impl_.response_.error_;
    _impl_.response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_error(::seegnify::graph::ErrorResponse* error) {
  clear_response();
  if (error) {
    set_has_error();
    _impl_.response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seegnify.graph.Response.error)
}
inline ::seegnify::graph::ErrorResponse* Response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    _impl_.response_.error_ = CreateMaybeMessage< ::seegnify::graph::ErrorResponse >(GetArenaForAllocation());
  }
  return _impl_.response_.error_;
}
inline ::seegnify::graph::ErrorResponse* Response::mutable_error() {
  ::seegnify::graph::ErrorResponse* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:seegnify.graph.Response.error)
  return _msg;
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace seegnify

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
